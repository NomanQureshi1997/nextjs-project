// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  topics        Topic[]
  Conversation  Conversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  notes     Note[]
}

model Note {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String
}

// Read stuff
enum Role {
  inference
  user
}

model Suggestion {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  text           String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
}

model Conversation {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  title       String?
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  messages    Message[]
  note        String?
  suggestions Suggestion[]
  views       Int          @default(0)
  upvotes     Int          @default(0)
  downvotes   Int          @default(0)
  shares      Int          @default(0)
  sharable    Boolean      @default(false)
  complexity  Int          @default(0)
  locale      String       @default("en")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  text           String?
  parentId       String?
  role           Role
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  edited         Boolean      @default(false)
  flagged        Boolean      @default(false)
  model          String?      @default("gpt-3.5-turbo")
  sources        Source[]
}

model Source {
  id          String   @id @default(cuid())
  position    Int
  title       String
  url         String
  dateCreated DateTime
  author      String?
  provider    String
  snippet     String
  used        Boolean  @default(false)
  message     Message  @relation(fields: [messageId], references: [id])
  messageId   String
}
